// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel5,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.717000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=109,HLS_SYN_LUT=158}" *)

module kernel5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bound,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state8 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv22_1 = 22'b1;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bound;
output  [9:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] i_reg_84;
reg   [31:0] sum_s_reg_95;
wire   [0:0] tmp_9_fu_146_p2;
reg   [0:0] tmp_9_reg_238;
wire   [0:0] tmp_2_fu_215_p2;
reg   [0:0] tmp_2_reg_243;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [31:0] i_1_fu_221_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] grp_fu_107_p2;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [31:0] ap_pipeline_reg_pp0_iter0_sum_reg_272;
reg   [31:0] sum_s_phi_fu_99_p4;
wire  signed [63:0] tmp_3_fu_227_p1;
wire   [31:0] bound_to_int_fu_116_p1;
wire   [7:0] tmp_6_fu_120_p4;
wire   [22:0] tmp_1_fu_130_p1;
wire   [0:0] notrhs2_fu_140_p2;
wire   [0:0] notlhs1_fu_134_p2;
wire   [31:0] sum_to_int_fu_152_p1;
wire   [7:0] tmp_fu_156_p4;
wire   [22:0] tmp_5_fu_166_p1;
wire   [0:0] notrhs_fu_176_p2;
wire   [0:0] notlhs_fu_170_p2;
wire   [0:0] tmp_8_fu_182_p2;
wire   [0:0] tmp_s_fu_188_p2;
wire   [0:0] tmp_7_fu_111_p2;
wire   [21:0] tmp_11_fu_199_p4;
wire   [0:0] tmp_10_fu_193_p2;
wire   [0:0] icmp_fu_209_p2;
wire   [0:0] ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
wire   [31:0] grp_fu_107_p0;
wire   [31:0] grp_fu_107_p1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

kernel5_fcmp_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel5_fcmp_32nscud_U2(
    .din0(sum_s_phi_fu_99_p4),
    .din1(bound),
    .opcode(ap_const_lv5_4),
    .dout(tmp_7_fu_111_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_fu_215_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(tmp_2_fu_215_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_fu_215_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(tmp_2_fu_215_p2 == 1'b0))) begin
        i_reg_84 <= i_1_fu_221_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_84 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        tmp_2_reg_243 <= tmp_2_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_9_reg_238 <= tmp_9_fu_146_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(tmp_2_reg_243 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        sum_s_phi_fu_99_p4 = ap_const_lv32_0;
    end else begin
        sum_s_phi_fu_99_p4 = sum_s_reg_95;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & ~(1'b1 == ap_enable_reg_pp0_iter4)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_2_fu_215_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_2_fu_215_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_3_fu_227_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_2];

assign ap_pipeline_reg_pp0_iter0_sum_reg_272 = ap_const_lv32_0;

assign ap_return = sum_s_reg_95;

assign b_address0 = tmp_3_fu_227_p1;

assign bound_to_int_fu_116_p1 = bound;

assign i_1_fu_221_p2 = (ap_const_lv32_1 + i_reg_84);

assign icmp_fu_209_p2 = (($signed(tmp_11_fu_199_p4) < $signed(22'b1)) ? 1'b1 : 1'b0);

assign notlhs1_fu_134_p2 = ((tmp_6_fu_120_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_170_p2 = ((tmp_fu_156_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs2_fu_140_p2 = ((tmp_1_fu_130_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_176_p2 = ((tmp_5_fu_166_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign sum_to_int_fu_152_p1 = sum_s_phi_fu_99_p4;

assign tmp_10_fu_193_p2 = (tmp_s_fu_188_p2 & tmp_7_fu_111_p2);

assign tmp_11_fu_199_p4 = {{i_reg_84[ap_const_lv32_1F : ap_const_lv32_A]}};

assign tmp_1_fu_130_p1 = bound_to_int_fu_116_p1[22:0];

assign tmp_2_fu_215_p2 = (tmp_10_fu_193_p2 & icmp_fu_209_p2);

assign tmp_3_fu_227_p1 = $signed(i_reg_84);

assign tmp_5_fu_166_p1 = sum_to_int_fu_152_p1[22:0];

assign tmp_6_fu_120_p4 = {{bound_to_int_fu_116_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_8_fu_182_p2 = (notrhs_fu_176_p2 | notlhs_fu_170_p2);

assign tmp_9_fu_146_p2 = (notrhs2_fu_140_p2 | notlhs1_fu_134_p2);

assign tmp_fu_156_p4 = {{sum_to_int_fu_152_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_s_fu_188_p2 = (tmp_8_fu_182_p2 & tmp_9_reg_238);

always @ (posedge ap_clk) begin
    sum_s_reg_95[31:0] <= 32'b00000000000000000000000000000000;
end

endmodule //kernel5
