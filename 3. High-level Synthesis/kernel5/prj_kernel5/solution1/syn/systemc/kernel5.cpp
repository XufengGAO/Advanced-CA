// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> kernel5::ap_ST_fsm_state1 = "1";
const sc_lv<3> kernel5::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> kernel5::ap_ST_fsm_state8 = "100";
const sc_lv<32> kernel5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> kernel5::ap_const_lv1_1 = "1";
const bool kernel5::ap_const_boolean_1 = true;
const sc_lv<32> kernel5::ap_const_lv32_1 = "1";
const sc_lv<1> kernel5::ap_const_lv1_0 = "0";
const sc_lv<32> kernel5::ap_const_lv32_17 = "10111";
const sc_lv<32> kernel5::ap_const_lv32_1E = "11110";
const sc_lv<8> kernel5::ap_const_lv8_FF = "11111111";
const sc_lv<23> kernel5::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> kernel5::ap_const_lv32_A = "1010";
const sc_lv<32> kernel5::ap_const_lv32_1F = "11111";
const sc_lv<22> kernel5::ap_const_lv22_1 = "1";
const sc_lv<5> kernel5::ap_const_lv5_4 = "100";
const sc_lv<32> kernel5::ap_const_lv32_2 = "10";

kernel5::kernel5(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel5_fcmp_32nscud_U2 = new kernel5_fcmp_32nscud<1,1,32,32,1>("kernel5_fcmp_32nscud_U2");
    kernel5_fcmp_32nscud_U2->din0(sum_s_phi_fu_99_p4);
    kernel5_fcmp_32nscud_U2->din1(bound);
    kernel5_fcmp_32nscud_U2->opcode(ap_var_for_const0);
    kernel5_fcmp_32nscud_U2->dout(tmp_7_fu_111_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_3_fu_227_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_pipeline_reg_pp0_iter0_sum_reg_272);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_return);
    sensitive << ( sum_s_reg_95 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_3_fu_227_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_bound_to_int_fu_116_p1);
    sensitive << ( bound );

    SC_METHOD(thread_i_1_fu_221_p2);
    sensitive << ( i_reg_84 );

    SC_METHOD(thread_icmp_fu_209_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_11_fu_199_p4 );

    SC_METHOD(thread_notlhs1_fu_134_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_6_fu_120_p4 );

    SC_METHOD(thread_notlhs_fu_170_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_156_p4 );

    SC_METHOD(thread_notrhs2_fu_140_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_130_p1 );

    SC_METHOD(thread_notrhs_fu_176_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_5_fu_166_p1 );

    SC_METHOD(thread_sum_s_phi_fu_99_p4);
    sensitive << ( sum_s_reg_95 );
    sensitive << ( tmp_2_reg_243 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sum_to_int_fu_152_p1);
    sensitive << ( sum_s_phi_fu_99_p4 );

    SC_METHOD(thread_tmp_10_fu_193_p2);
    sensitive << ( tmp_s_fu_188_p2 );
    sensitive << ( tmp_7_fu_111_p2 );

    SC_METHOD(thread_tmp_11_fu_199_p4);
    sensitive << ( i_reg_84 );

    SC_METHOD(thread_tmp_1_fu_130_p1);
    sensitive << ( bound_to_int_fu_116_p1 );

    SC_METHOD(thread_tmp_2_fu_215_p2);
    sensitive << ( tmp_10_fu_193_p2 );
    sensitive << ( icmp_fu_209_p2 );

    SC_METHOD(thread_tmp_3_fu_227_p1);
    sensitive << ( i_reg_84 );

    SC_METHOD(thread_tmp_5_fu_166_p1);
    sensitive << ( sum_to_int_fu_152_p1 );

    SC_METHOD(thread_tmp_6_fu_120_p4);
    sensitive << ( bound_to_int_fu_116_p1 );

    SC_METHOD(thread_tmp_8_fu_182_p2);
    sensitive << ( notrhs_fu_176_p2 );
    sensitive << ( notlhs_fu_170_p2 );

    SC_METHOD(thread_tmp_9_fu_146_p2);
    sensitive << ( notrhs2_fu_140_p2 );
    sensitive << ( notlhs1_fu_134_p2 );

    SC_METHOD(thread_tmp_fu_156_p4);
    sensitive << ( sum_to_int_fu_152_p1 );

    SC_METHOD(thread_tmp_s_fu_188_p2);
    sensitive << ( tmp_9_reg_238 );
    sensitive << ( tmp_8_fu_182_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_215_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bound, "(port)bound");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_reg_84, "i_reg_84");
    sc_trace(mVcdFile, sum_s_reg_95, "sum_s_reg_95");
    sc_trace(mVcdFile, tmp_9_fu_146_p2, "tmp_9_fu_146_p2");
    sc_trace(mVcdFile, tmp_9_reg_238, "tmp_9_reg_238");
    sc_trace(mVcdFile, tmp_2_fu_215_p2, "tmp_2_fu_215_p2");
    sc_trace(mVcdFile, tmp_2_reg_243, "tmp_2_reg_243");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, i_1_fu_221_p2, "i_1_fu_221_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, grp_fu_107_p2, "grp_fu_107_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter0_sum_reg_272, "ap_pipeline_reg_pp0_iter0_sum_reg_272");
    sc_trace(mVcdFile, sum_s_phi_fu_99_p4, "sum_s_phi_fu_99_p4");
    sc_trace(mVcdFile, tmp_3_fu_227_p1, "tmp_3_fu_227_p1");
    sc_trace(mVcdFile, bound_to_int_fu_116_p1, "bound_to_int_fu_116_p1");
    sc_trace(mVcdFile, tmp_6_fu_120_p4, "tmp_6_fu_120_p4");
    sc_trace(mVcdFile, tmp_1_fu_130_p1, "tmp_1_fu_130_p1");
    sc_trace(mVcdFile, notrhs2_fu_140_p2, "notrhs2_fu_140_p2");
    sc_trace(mVcdFile, notlhs1_fu_134_p2, "notlhs1_fu_134_p2");
    sc_trace(mVcdFile, sum_to_int_fu_152_p1, "sum_to_int_fu_152_p1");
    sc_trace(mVcdFile, tmp_fu_156_p4, "tmp_fu_156_p4");
    sc_trace(mVcdFile, tmp_5_fu_166_p1, "tmp_5_fu_166_p1");
    sc_trace(mVcdFile, notrhs_fu_176_p2, "notrhs_fu_176_p2");
    sc_trace(mVcdFile, notlhs_fu_170_p2, "notlhs_fu_170_p2");
    sc_trace(mVcdFile, tmp_8_fu_182_p2, "tmp_8_fu_182_p2");
    sc_trace(mVcdFile, tmp_s_fu_188_p2, "tmp_s_fu_188_p2");
    sc_trace(mVcdFile, tmp_7_fu_111_p2, "tmp_7_fu_111_p2");
    sc_trace(mVcdFile, tmp_11_fu_199_p4, "tmp_11_fu_199_p4");
    sc_trace(mVcdFile, tmp_10_fu_193_p2, "tmp_10_fu_193_p2");
    sc_trace(mVcdFile, icmp_fu_209_p2, "icmp_fu_209_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_107_p0, "grp_fu_107_p0");
    sc_trace(mVcdFile, grp_fu_107_p1, "grp_fu_107_p1");
#endif

    }
    mHdltvinHandle.open("kernel5.hdltvin.dat");
    mHdltvoutHandle.open("kernel5.hdltvout.dat");
}

kernel5::~kernel5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel5_fcmp_32nscud_U2;
}

void kernel5::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv5_4;
}

void kernel5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(tmp_2_fu_215_p2.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !esl_seteq<1,1,1>(tmp_2_fu_215_p2.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(tmp_2_fu_215_p2.read(), ap_const_lv1_0)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !esl_seteq<1,1,1>(tmp_2_fu_215_p2.read(), ap_const_lv1_0))) {
        i_reg_84 = i_1_fu_221_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_84 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !esl_seteq<1,1,1>(tmp_2_reg_243.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        sum_s_reg_95 = ap_pipeline_reg_pp0_iter0_sum_reg_272.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        tmp_2_reg_243 = tmp_2_fu_215_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_9_reg_238 = tmp_9_fu_146_p2.read();
    }
}

void kernel5::thread_a_address0() {
    a_address0 =  (sc_lv<10>) (tmp_3_fu_227_p1.read());
}

void kernel5::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void kernel5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void kernel5::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(2, 2);
}

void kernel5::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel5::thread_ap_pipeline_reg_pp0_iter0_sum_reg_272() {
    ap_pipeline_reg_pp0_iter0_sum_reg_272 = ap_const_lv32_0;
}

void kernel5::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel5::thread_ap_return() {
    ap_return = sum_s_reg_95.read();
}

void kernel5::thread_b_address0() {
    b_address0 =  (sc_lv<10>) (tmp_3_fu_227_p1.read());
}

void kernel5::thread_b_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_bound_to_int_fu_116_p1() {
    bound_to_int_fu_116_p1 = bound.read();
}

void kernel5::thread_i_1_fu_221_p2() {
    i_1_fu_221_p2 = (!ap_const_lv32_1.is_01() || !i_reg_84.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(i_reg_84.read()));
}

void kernel5::thread_icmp_fu_209_p2() {
    icmp_fu_209_p2 = (!tmp_11_fu_199_p4.read().is_01() || !ap_const_lv22_1.is_01())? sc_lv<1>(): (sc_bigint<22>(tmp_11_fu_199_p4.read()) < sc_bigint<22>(ap_const_lv22_1));
}

void kernel5::thread_notlhs1_fu_134_p2() {
    notlhs1_fu_134_p2 = (!tmp_6_fu_120_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_120_p4.read() != ap_const_lv8_FF);
}

void kernel5::thread_notlhs_fu_170_p2() {
    notlhs_fu_170_p2 = (!tmp_fu_156_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_156_p4.read() != ap_const_lv8_FF);
}

void kernel5::thread_notrhs2_fu_140_p2() {
    notrhs2_fu_140_p2 = (!tmp_1_fu_130_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_130_p1.read() == ap_const_lv23_0);
}

void kernel5::thread_notrhs_fu_176_p2() {
    notrhs_fu_176_p2 = (!tmp_5_fu_166_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_166_p1.read() == ap_const_lv23_0);
}

void kernel5::thread_sum_s_phi_fu_99_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !esl_seteq<1,1,1>(tmp_2_reg_243.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        sum_s_phi_fu_99_p4 = ap_const_lv32_0;
    } else {
        sum_s_phi_fu_99_p4 = sum_s_reg_95.read();
    }
}

void kernel5::thread_sum_to_int_fu_152_p1() {
    sum_to_int_fu_152_p1 = sum_s_phi_fu_99_p4.read();
}

void kernel5::thread_tmp_10_fu_193_p2() {
    tmp_10_fu_193_p2 = (tmp_s_fu_188_p2.read() & tmp_7_fu_111_p2.read());
}

void kernel5::thread_tmp_11_fu_199_p4() {
    tmp_11_fu_199_p4 = i_reg_84.read().range(31, 10);
}

void kernel5::thread_tmp_1_fu_130_p1() {
    tmp_1_fu_130_p1 = bound_to_int_fu_116_p1.read().range(23-1, 0);
}

void kernel5::thread_tmp_2_fu_215_p2() {
    tmp_2_fu_215_p2 = (tmp_10_fu_193_p2.read() & icmp_fu_209_p2.read());
}

void kernel5::thread_tmp_3_fu_227_p1() {
    tmp_3_fu_227_p1 = esl_sext<64,32>(i_reg_84.read());
}

void kernel5::thread_tmp_5_fu_166_p1() {
    tmp_5_fu_166_p1 = sum_to_int_fu_152_p1.read().range(23-1, 0);
}

void kernel5::thread_tmp_6_fu_120_p4() {
    tmp_6_fu_120_p4 = bound_to_int_fu_116_p1.read().range(30, 23);
}

void kernel5::thread_tmp_8_fu_182_p2() {
    tmp_8_fu_182_p2 = (notrhs_fu_176_p2.read() | notlhs_fu_170_p2.read());
}

void kernel5::thread_tmp_9_fu_146_p2() {
    tmp_9_fu_146_p2 = (notrhs2_fu_140_p2.read() | notlhs1_fu_134_p2.read());
}

void kernel5::thread_tmp_fu_156_p4() {
    tmp_fu_156_p4 = sum_to_int_fu_152_p1.read().range(30, 23);
}

void kernel5::thread_tmp_s_fu_188_p2() {
    tmp_s_fu_188_p2 = (tmp_8_fu_182_p2.read() & tmp_9_reg_238.read());
}

void kernel5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(tmp_2_fu_215_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(tmp_2_fu_215_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void kernel5::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bound\" :  \"" << bound.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

