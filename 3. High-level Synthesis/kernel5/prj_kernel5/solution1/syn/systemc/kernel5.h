// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel5_HH_
#define _kernel5_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel5_fadd_32nsbkb.h"
#include "kernel5_fcmp_32nscud.h"

namespace ap_rtl {

struct kernel5 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > bound;
    sc_out< sc_lv<10> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<32> > a_q0;
    sc_out< sc_lv<10> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<32> > b_q0;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    kernel5(sc_module_name name);
    SC_HAS_PROCESS(kernel5);

    ~kernel5();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel5_fcmp_32nscud<1,1,32,32,1>* kernel5_fcmp_32nscud_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > i_reg_84;
    sc_signal< sc_lv<32> > sum_s_reg_95;
    sc_signal< sc_lv<1> > tmp_9_fu_146_p2;
    sc_signal< sc_lv<1> > tmp_9_reg_238;
    sc_signal< sc_lv<1> > tmp_2_fu_215_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_243;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<32> > i_1_fu_221_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > grp_fu_107_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter0_sum_reg_272;
    sc_signal< sc_lv<32> > sum_s_phi_fu_99_p4;
    sc_signal< sc_lv<64> > tmp_3_fu_227_p1;
    sc_signal< sc_lv<32> > bound_to_int_fu_116_p1;
    sc_signal< sc_lv<8> > tmp_6_fu_120_p4;
    sc_signal< sc_lv<23> > tmp_1_fu_130_p1;
    sc_signal< sc_lv<1> > notrhs2_fu_140_p2;
    sc_signal< sc_lv<1> > notlhs1_fu_134_p2;
    sc_signal< sc_lv<32> > sum_to_int_fu_152_p1;
    sc_signal< sc_lv<8> > tmp_fu_156_p4;
    sc_signal< sc_lv<23> > tmp_5_fu_166_p1;
    sc_signal< sc_lv<1> > notrhs_fu_176_p2;
    sc_signal< sc_lv<1> > notlhs_fu_170_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_182_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_188_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_111_p2;
    sc_signal< sc_lv<22> > tmp_11_fu_199_p4;
    sc_signal< sc_lv<1> > tmp_10_fu_193_p2;
    sc_signal< sc_lv<1> > icmp_fu_209_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state8;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_lv<32> > grp_fu_107_p0;
    sc_signal< sc_lv<32> > grp_fu_107_p1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<22> ap_const_lv22_1;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_pipeline_reg_pp0_iter0_sum_reg_272();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_bound_to_int_fu_116_p1();
    void thread_i_1_fu_221_p2();
    void thread_icmp_fu_209_p2();
    void thread_notlhs1_fu_134_p2();
    void thread_notlhs_fu_170_p2();
    void thread_notrhs2_fu_140_p2();
    void thread_notrhs_fu_176_p2();
    void thread_sum_s_phi_fu_99_p4();
    void thread_sum_to_int_fu_152_p1();
    void thread_tmp_10_fu_193_p2();
    void thread_tmp_11_fu_199_p4();
    void thread_tmp_1_fu_130_p1();
    void thread_tmp_2_fu_215_p2();
    void thread_tmp_3_fu_227_p1();
    void thread_tmp_5_fu_166_p1();
    void thread_tmp_6_fu_120_p4();
    void thread_tmp_8_fu_182_p2();
    void thread_tmp_9_fu_146_p2();
    void thread_tmp_fu_156_p4();
    void thread_tmp_s_fu_188_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
