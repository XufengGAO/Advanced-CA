// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel4,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.320000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=118,HLS_SYN_LUT=226}" *)

module kernel4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        array_r_address1,
        array_r_ce1,
        array_r_we1,
        array_r_d1,
        array_r_q1,
        index_address0,
        index_ce0,
        index_q0,
        offset
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_pp0_stage0 = 4'b100;
parameter    ap_ST_fsm_state10 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_3FF = 32'b1111111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [9:0] array_r_address1;
output   array_r_ce1;
output   array_r_we1;
output  [31:0] array_r_d1;
input  [31:0] array_r_q1;
output  [9:0] index_address0;
output   index_ce0;
input  [31:0] index_q0;
input  [31:0] offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] array_r_address0;
reg array_r_ce0;
reg[9:0] array_r_address1;
reg array_r_ce1;
reg array_r_we1;
reg index_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] sum1_reg_85;
reg   [31:0] i_0_in_reg_96;
reg   [9:0] array_addr_reg_168;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] i_fu_110_p2;
reg   [31:0] i_reg_179;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_1_fu_116_p2;
reg   [0:0] tmp_1_reg_184;
reg   [0:0] ap_pipeline_reg_pp0_iter1_tmp_1_reg_184;
reg   [0:0] ap_pipeline_reg_pp0_iter2_tmp_1_reg_184;
reg   [0:0] ap_pipeline_reg_pp0_iter3_tmp_1_reg_184;
reg   [0:0] ap_pipeline_reg_pp0_iter4_tmp_1_reg_184;
reg   [0:0] ap_pipeline_reg_pp0_iter5_tmp_1_reg_184;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] sum_1_fu_157_p2;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] i_0_in_phi_fu_99_p4;
wire  signed [63:0] tmp_fu_105_p1;
wire  signed [63:0] tmp_2_fu_122_p1;
wire  signed [63:0] tmp_5_fu_134_p1;
wire   [0:0] ap_CS_fsm_state10;
wire   [31:0] tmp_4_fu_128_p2;
wire   [31:0] grp_fu_139_p2;
wire   [31:0] tmp_7_fu_151_p2;
wire   [31:0] grp_fu_145_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

kernel4_mul_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel4_mul_32s_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(array_r_q0),
    .din1(index_q0),
    .ce(1'b1),
    .dout(grp_fu_139_p2)
);

kernel4_mul_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel4_mul_32s_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(array_r_q1),
    .din1(index_q0),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_fu_116_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(tmp_1_fu_116_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_fu_116_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(tmp_1_reg_184 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_0_in_reg_96 <= i_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_in_reg_96 <= offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & ~(ap_pipeline_reg_pp0_iter5_tmp_1_reg_184 == 1'b0))) begin
        sum1_reg_85 <= sum_1_fu_157_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sum1_reg_85 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_tmp_1_reg_184 <= tmp_1_reg_184;
        tmp_1_reg_184 <= tmp_1_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_pipeline_reg_pp0_iter2_tmp_1_reg_184 <= ap_pipeline_reg_pp0_iter1_tmp_1_reg_184;
        ap_pipeline_reg_pp0_iter3_tmp_1_reg_184 <= ap_pipeline_reg_pp0_iter2_tmp_1_reg_184;
        ap_pipeline_reg_pp0_iter4_tmp_1_reg_184 <= ap_pipeline_reg_pp0_iter3_tmp_1_reg_184;
        ap_pipeline_reg_pp0_iter5_tmp_1_reg_184 <= ap_pipeline_reg_pp0_iter4_tmp_1_reg_184;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        array_addr_reg_168 <= tmp_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_reg_179 <= i_fu_110_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        array_r_address0 = tmp_2_fu_122_p1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        array_r_address0 = tmp_fu_105_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        array_r_address1 = array_addr_reg_168;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        array_r_address1 = tmp_5_fu_134_p1;
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (1'b1 == ap_CS_fsm_state10))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        array_r_we1 = 1'b1;
    end else begin
        array_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(tmp_1_reg_184 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_0_in_phi_fu_99_p4 = i_reg_179;
    end else begin
        i_0_in_phi_fu_99_p4 = i_0_in_reg_96;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        index_ce0 = 1'b1;
    end else begin
        index_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter6) & ~(1'b1 == ap_enable_reg_pp0_iter5)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_fu_116_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_fu_116_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign array_r_d1 = sum1_reg_85;

assign i_fu_110_p2 = (i_0_in_phi_fu_99_p4 + ap_const_lv32_1);

assign index_address0 = tmp_2_fu_122_p1;

assign sum_1_fu_157_p2 = (tmp_7_fu_151_p2 + grp_fu_145_p2);

assign tmp_1_fu_116_p2 = (($signed(i_fu_110_p2) < $signed(32'b1111111111)) ? 1'b1 : 1'b0);

assign tmp_2_fu_122_p1 = $signed(i_fu_110_p2);

assign tmp_4_fu_128_p2 = (i_0_in_phi_fu_99_p4 + ap_const_lv32_2);

assign tmp_5_fu_134_p1 = $signed(tmp_4_fu_128_p2);

assign tmp_7_fu_151_p2 = (sum1_reg_85 - grp_fu_139_p2);

assign tmp_fu_105_p1 = $signed(offset);

endmodule //kernel4
