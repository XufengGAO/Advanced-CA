// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel4_HH_
#define _kernel4_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel4_mul_32s_3bkb.h"

namespace ap_rtl {

struct kernel4 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<10> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_out< sc_logic > array_r_we1;
    sc_out< sc_lv<32> > array_r_d1;
    sc_in< sc_lv<32> > array_r_q1;
    sc_out< sc_lv<10> > index_address0;
    sc_out< sc_logic > index_ce0;
    sc_in< sc_lv<32> > index_q0;
    sc_in< sc_lv<32> > offset;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    kernel4(sc_module_name name);
    SC_HAS_PROCESS(kernel4);

    ~kernel4();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel4_mul_32s_3bkb<1,6,32,32,32>* kernel4_mul_32s_3bkb_U1;
    kernel4_mul_32s_3bkb<1,6,32,32,32>* kernel4_mul_32s_3bkb_U2;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sum1_reg_85;
    sc_signal< sc_lv<32> > i_0_in_reg_96;
    sc_signal< sc_lv<10> > array_addr_reg_168;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_fu_110_p2;
    sc_signal< sc_lv<32> > i_reg_179;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_1_fu_116_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_184;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_tmp_1_reg_184;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter2_tmp_1_reg_184;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter3_tmp_1_reg_184;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter4_tmp_1_reg_184;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter5_tmp_1_reg_184;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > sum_1_fu_157_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<32> > i_0_in_phi_fu_99_p4;
    sc_signal< sc_lv<64> > tmp_fu_105_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_122_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_134_p1;
    sc_signal< sc_lv<1> > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > tmp_4_fu_128_p2;
    sc_signal< sc_lv<32> > grp_fu_139_p2;
    sc_signal< sc_lv<32> > tmp_7_fu_151_p2;
    sc_signal< sc_lv<32> > grp_fu_145_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_3FF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_array_r_d1();
    void thread_array_r_we1();
    void thread_i_0_in_phi_fu_99_p4();
    void thread_i_fu_110_p2();
    void thread_index_address0();
    void thread_index_ce0();
    void thread_sum_1_fu_157_p2();
    void thread_tmp_1_fu_116_p2();
    void thread_tmp_2_fu_122_p1();
    void thread_tmp_4_fu_128_p2();
    void thread_tmp_5_fu_134_p1();
    void thread_tmp_7_fu_151_p2();
    void thread_tmp_fu_105_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
