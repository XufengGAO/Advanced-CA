// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel4::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> kernel4::ap_ST_fsm_state1 = "1";
const sc_lv<4> kernel4::ap_ST_fsm_state2 = "10";
const sc_lv<4> kernel4::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> kernel4::ap_ST_fsm_state10 = "1000";
const sc_lv<32> kernel4::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> kernel4::ap_const_lv1_1 = "1";
const bool kernel4::ap_const_boolean_1 = true;
const sc_lv<32> kernel4::ap_const_lv32_1 = "1";
const sc_lv<32> kernel4::ap_const_lv32_2 = "10";
const sc_lv<1> kernel4::ap_const_lv1_0 = "0";
const sc_lv<32> kernel4::ap_const_lv32_3 = "11";
const sc_lv<32> kernel4::ap_const_lv32_3FF = "1111111111";

kernel4::kernel4(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel4_mul_32s_3bkb_U1 = new kernel4_mul_32s_3bkb<1,6,32,32,32>("kernel4_mul_32s_3bkb_U1");
    kernel4_mul_32s_3bkb_U1->clk(ap_clk);
    kernel4_mul_32s_3bkb_U1->reset(ap_rst);
    kernel4_mul_32s_3bkb_U1->din0(array_r_q0);
    kernel4_mul_32s_3bkb_U1->din1(index_q0);
    kernel4_mul_32s_3bkb_U1->ce(ap_var_for_const0);
    kernel4_mul_32s_3bkb_U1->dout(grp_fu_139_p2);
    kernel4_mul_32s_3bkb_U2 = new kernel4_mul_32s_3bkb<1,6,32,32,32>("kernel4_mul_32s_3bkb_U2");
    kernel4_mul_32s_3bkb_U2->clk(ap_clk);
    kernel4_mul_32s_3bkb_U2->reset(ap_rst);
    kernel4_mul_32s_3bkb_U2->din0(array_r_q1);
    kernel4_mul_32s_3bkb_U2->din1(index_q0);
    kernel4_mul_32s_3bkb_U2->ce(ap_var_for_const0);
    kernel4_mul_32s_3bkb_U2->dout(grp_fu_145_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_array_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_105_p1 );
    sensitive << ( tmp_2_fu_122_p1 );

    SC_METHOD(thread_array_r_address1);
    sensitive << ( array_addr_reg_168 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_5_fu_134_p1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_array_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_array_r_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_array_r_d1);
    sensitive << ( sum1_reg_85 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_array_r_we1);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_i_0_in_phi_fu_99_p4);
    sensitive << ( i_0_in_reg_96 );
    sensitive << ( i_reg_179 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_1_reg_184 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_i_fu_110_p2);
    sensitive << ( i_0_in_phi_fu_99_p4 );

    SC_METHOD(thread_index_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_122_p1 );

    SC_METHOD(thread_index_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_sum_1_fu_157_p2);
    sensitive << ( tmp_7_fu_151_p2 );
    sensitive << ( grp_fu_145_p2 );

    SC_METHOD(thread_tmp_1_fu_116_p2);
    sensitive << ( i_fu_110_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_2_fu_122_p1);
    sensitive << ( i_fu_110_p2 );

    SC_METHOD(thread_tmp_4_fu_128_p2);
    sensitive << ( i_0_in_phi_fu_99_p4 );

    SC_METHOD(thread_tmp_5_fu_134_p1);
    sensitive << ( tmp_4_fu_128_p2 );

    SC_METHOD(thread_tmp_7_fu_151_p2);
    sensitive << ( sum1_reg_85 );
    sensitive << ( grp_fu_139_p2 );

    SC_METHOD(thread_tmp_fu_105_p1);
    sensitive << ( offset );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_116_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_r_address0, "(port)array_r_address0");
    sc_trace(mVcdFile, array_r_ce0, "(port)array_r_ce0");
    sc_trace(mVcdFile, array_r_q0, "(port)array_r_q0");
    sc_trace(mVcdFile, array_r_address1, "(port)array_r_address1");
    sc_trace(mVcdFile, array_r_ce1, "(port)array_r_ce1");
    sc_trace(mVcdFile, array_r_we1, "(port)array_r_we1");
    sc_trace(mVcdFile, array_r_d1, "(port)array_r_d1");
    sc_trace(mVcdFile, array_r_q1, "(port)array_r_q1");
    sc_trace(mVcdFile, index_address0, "(port)index_address0");
    sc_trace(mVcdFile, index_ce0, "(port)index_ce0");
    sc_trace(mVcdFile, index_q0, "(port)index_q0");
    sc_trace(mVcdFile, offset, "(port)offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sum1_reg_85, "sum1_reg_85");
    sc_trace(mVcdFile, i_0_in_reg_96, "i_0_in_reg_96");
    sc_trace(mVcdFile, array_addr_reg_168, "array_addr_reg_168");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_110_p2, "i_fu_110_p2");
    sc_trace(mVcdFile, i_reg_179, "i_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_1_fu_116_p2, "tmp_1_fu_116_p2");
    sc_trace(mVcdFile, tmp_1_reg_184, "tmp_1_reg_184");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_tmp_1_reg_184, "ap_pipeline_reg_pp0_iter1_tmp_1_reg_184");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_tmp_1_reg_184, "ap_pipeline_reg_pp0_iter2_tmp_1_reg_184");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_tmp_1_reg_184, "ap_pipeline_reg_pp0_iter3_tmp_1_reg_184");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_tmp_1_reg_184, "ap_pipeline_reg_pp0_iter4_tmp_1_reg_184");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter5_tmp_1_reg_184, "ap_pipeline_reg_pp0_iter5_tmp_1_reg_184");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, sum_1_fu_157_p2, "sum_1_fu_157_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, i_0_in_phi_fu_99_p4, "i_0_in_phi_fu_99_p4");
    sc_trace(mVcdFile, tmp_fu_105_p1, "tmp_fu_105_p1");
    sc_trace(mVcdFile, tmp_2_fu_122_p1, "tmp_2_fu_122_p1");
    sc_trace(mVcdFile, tmp_5_fu_134_p1, "tmp_5_fu_134_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_4_fu_128_p2, "tmp_4_fu_128_p2");
    sc_trace(mVcdFile, grp_fu_139_p2, "grp_fu_139_p2");
    sc_trace(mVcdFile, tmp_7_fu_151_p2, "tmp_7_fu_151_p2");
    sc_trace(mVcdFile, grp_fu_145_p2, "grp_fu_145_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("kernel4.hdltvin.dat");
    mHdltvoutHandle.open("kernel4.hdltvout.dat");
}

kernel4::~kernel4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel4_mul_32s_3bkb_U1;
    delete kernel4_mul_32s_3bkb_U2;
}

void kernel4::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel4::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(tmp_1_fu_116_p2.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !esl_seteq<1,1,1>(tmp_1_fu_116_p2.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(tmp_1_fu_116_p2.read(), ap_const_lv1_0)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter6 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !esl_seteq<1,1,1>(tmp_1_reg_184.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_in_reg_96 = i_reg_179.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_0_in_reg_96 = offset.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && 
         !esl_seteq<1,1,1>(ap_pipeline_reg_pp0_iter5_tmp_1_reg_184.read(), ap_const_lv1_0))) {
        sum1_reg_85 = sum_1_fu_157_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        sum1_reg_85 = array_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        ap_pipeline_reg_pp0_iter1_tmp_1_reg_184 = tmp_1_reg_184.read();
        tmp_1_reg_184 = tmp_1_fu_116_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_pipeline_reg_pp0_iter2_tmp_1_reg_184 = ap_pipeline_reg_pp0_iter1_tmp_1_reg_184.read();
        ap_pipeline_reg_pp0_iter3_tmp_1_reg_184 = ap_pipeline_reg_pp0_iter2_tmp_1_reg_184.read();
        ap_pipeline_reg_pp0_iter4_tmp_1_reg_184 = ap_pipeline_reg_pp0_iter3_tmp_1_reg_184.read();
        ap_pipeline_reg_pp0_iter5_tmp_1_reg_184 = ap_pipeline_reg_pp0_iter4_tmp_1_reg_184.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        array_addr_reg_168 =  (sc_lv<10>) (tmp_fu_105_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_179 = i_fu_110_p2.read();
    }
}

void kernel4::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(2, 2);
}

void kernel4::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void kernel4::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(3, 3);
}

void kernel4::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void kernel4::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel4::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel4::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel4::thread_array_r_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        array_r_address0 =  (sc_lv<10>) (tmp_2_fu_122_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        array_r_address0 =  (sc_lv<10>) (tmp_fu_105_p1.read());
    } else {
        array_r_address0 = "XXXXXXXXXX";
    }
}

void kernel4::thread_array_r_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        array_r_address1 = array_addr_reg_168.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        array_r_address1 =  (sc_lv<10>) (tmp_5_fu_134_p1.read());
    } else {
        array_r_address1 = "XXXXXXXXXX";
    }
}

void kernel4::thread_array_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        array_r_ce0 = ap_const_logic_1;
    } else {
        array_r_ce0 = ap_const_logic_0;
    }
}

void kernel4::thread_array_r_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        array_r_ce1 = ap_const_logic_1;
    } else {
        array_r_ce1 = ap_const_logic_0;
    }
}

void kernel4::thread_array_r_d1() {
    array_r_d1 = sum1_reg_85.read();
}

void kernel4::thread_array_r_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        array_r_we1 = ap_const_logic_1;
    } else {
        array_r_we1 = ap_const_logic_0;
    }
}

void kernel4::thread_i_0_in_phi_fu_99_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !esl_seteq<1,1,1>(tmp_1_reg_184.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_in_phi_fu_99_p4 = i_reg_179.read();
    } else {
        i_0_in_phi_fu_99_p4 = i_0_in_reg_96.read();
    }
}

void kernel4::thread_i_fu_110_p2() {
    i_fu_110_p2 = (!i_0_in_phi_fu_99_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_in_phi_fu_99_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void kernel4::thread_index_address0() {
    index_address0 =  (sc_lv<10>) (tmp_2_fu_122_p1.read());
}

void kernel4::thread_index_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        index_ce0 = ap_const_logic_1;
    } else {
        index_ce0 = ap_const_logic_0;
    }
}

void kernel4::thread_sum_1_fu_157_p2() {
    sum_1_fu_157_p2 = (!tmp_7_fu_151_p2.read().is_01() || !grp_fu_145_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_fu_151_p2.read()) + sc_biguint<32>(grp_fu_145_p2.read()));
}

void kernel4::thread_tmp_1_fu_116_p2() {
    tmp_1_fu_116_p2 = (!i_fu_110_p2.read().is_01() || !ap_const_lv32_3FF.is_01())? sc_lv<1>(): (sc_bigint<32>(i_fu_110_p2.read()) < sc_bigint<32>(ap_const_lv32_3FF));
}

void kernel4::thread_tmp_2_fu_122_p1() {
    tmp_2_fu_122_p1 = esl_sext<64,32>(i_fu_110_p2.read());
}

void kernel4::thread_tmp_4_fu_128_p2() {
    tmp_4_fu_128_p2 = (!i_0_in_phi_fu_99_p4.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_in_phi_fu_99_p4.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void kernel4::thread_tmp_5_fu_134_p1() {
    tmp_5_fu_134_p1 = esl_sext<64,32>(tmp_4_fu_128_p2.read());
}

void kernel4::thread_tmp_7_fu_151_p2() {
    tmp_7_fu_151_p2 = (!sum1_reg_85.read().is_01() || !grp_fu_139_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum1_reg_85.read()) - sc_biguint<32>(grp_fu_139_p2.read()));
}

void kernel4::thread_tmp_fu_105_p1() {
    tmp_fu_105_p1 = esl_sext<64,32>(offset.read());
}

void kernel4::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(tmp_1_fu_116_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(tmp_1_fu_116_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void kernel4::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address0\" :  \"" << array_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce0\" :  \"" << array_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q0\" :  \"" << array_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address1\" :  \"" << array_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce1\" :  \"" << array_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_we1\" :  \"" << array_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_d1\" :  \"" << array_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q1\" :  \"" << array_r_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"index_address0\" :  \"" << index_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"index_ce0\" :  \"" << index_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"index_q0\" :  \"" << index_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"offset\" :  \"" << offset.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

