// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel2,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.140000,HLS_SYN_LAT=5110,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=206,HLS_SYN_LUT=254}" *)

module kernel2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        array_r_address1,
        array_r_ce1,
        array_r_we1,
        array_r_d1,
        array_r_q1
);

parameter    ap_ST_fsm_state1 = 9'b1;
parameter    ap_ST_fsm_state2 = 9'b10;
parameter    ap_ST_fsm_state3 = 9'b100;
parameter    ap_ST_fsm_pp0_stage0 = 9'b1000;
parameter    ap_ST_fsm_pp0_stage1 = 9'b10000;
parameter    ap_ST_fsm_pp0_stage2 = 9'b100000;
parameter    ap_ST_fsm_pp0_stage3 = 9'b1000000;
parameter    ap_ST_fsm_pp0_stage4 = 9'b10000000;
parameter    ap_ST_fsm_state11 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv11_3 = 11'b11;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv32_8 = 32'b1000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [9:0] array_r_address1;
output   array_r_ce1;
output   array_r_we1;
output  [31:0] array_r_d1;
input  [31:0] array_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] array_r_address0;
reg array_r_ce0;
reg[9:0] array_r_address1;
reg array_r_ce1;
reg array_r_we1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg  signed [31:0] reg0_1_reg_82;
reg   [31:0] reg1_1_reg_92;
reg   [10:0] i_reg_103;
reg   [10:0] ap_pipeline_reg_pp0_iter1_i_reg_103;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg  signed [31:0] reg_reg_115;
wire   [0:0] ap_CS_fsm_state2;
reg   [31:0] reg2_reg_165;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_126_p2;
reg   [0:0] exitcond_reg_185;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_185;
wire   [10:0] i_1_fu_138_p2;
reg   [10:0] i_1_reg_189;
wire   [0:0] ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] result_fu_144_p2;
reg   [31:0] result_reg_194;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] reg0_1_phi_fu_85_p4;
reg   [10:0] i_phi_fu_107_p4;
reg  signed [31:0] reg_phi_fu_118_p4;
wire   [63:0] tmp_1_fu_150_p1;
wire   [0:0] ap_CS_fsm_pp0_stage1;
wire   [31:0] grp_fu_132_p2;
wire   [0:0] ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

kernel2_mul_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel2_mul_32s_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg0_1_phi_fu_85_p4),
    .din1(reg_phi_fu_118_p4),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_fu_126_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_reg_185 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage4) & ~(exitcond_reg_185 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_103 <= i_1_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_103 <= ap_const_lv11_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        reg0_1_reg_82 <= reg1_1_reg_92;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg0_1_reg_82 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        reg1_1_reg_92 <= result_fu_144_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg1_1_reg_92 <= reg2_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        reg_reg_115 <= reg0_1_reg_82;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_reg_115 <= array_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_reg_185 <= exitcond_reg_185;
        ap_pipeline_reg_pp0_iter1_i_reg_103 <= i_reg_103;
        exitcond_reg_185 <= exitcond_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_reg_185 == 1'b0))) begin
        i_1_reg_189 <= i_1_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        reg2_reg_165 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        result_reg_194 <= result_fu_144_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address0 = ap_const_lv64_1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        array_r_address0 = ap_const_lv64_2;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        array_r_address1 = tmp_1_fu_150_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address1 = ap_const_lv64_0;
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state2))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_185 == 1'b0))) begin
        array_r_we1 = 1'b1;
    end else begin
        array_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_107_p4 = i_1_reg_189;
    end else begin
        i_phi_fu_107_p4 = i_reg_103;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        reg0_1_phi_fu_85_p4 = reg1_1_reg_92;
    end else begin
        reg0_1_phi_fu_85_p4 = reg0_1_reg_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_185 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        reg_phi_fu_118_p4 = reg0_1_reg_82;
    end else begin
        reg_phi_fu_118_p4 = reg_reg_115;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_fu_126_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b1 == ap_enable_reg_pp0_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        end
        ap_ST_fsm_pp0_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign array_r_d1 = result_reg_194;

assign exitcond_fu_126_p2 = ((i_phi_fu_107_p4 == ap_const_lv11_400) ? 1'b1 : 1'b0);

assign i_1_fu_138_p2 = (i_reg_103 + ap_const_lv11_1);

assign result_fu_144_p2 = (grp_fu_132_p2 + reg1_1_reg_92);

assign tmp_1_fu_150_p1 = ap_pipeline_reg_pp0_iter1_i_reg_103;

endmodule //kernel2
