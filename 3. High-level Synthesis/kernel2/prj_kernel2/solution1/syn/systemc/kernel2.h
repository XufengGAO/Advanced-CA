// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel2_HH_
#define _kernel2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel2_mul_32s_3bkb.h"

namespace ap_rtl {

struct kernel2 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<10> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_out< sc_logic > array_r_we1;
    sc_out< sc_lv<32> > array_r_d1;
    sc_in< sc_lv<32> > array_r_q1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    kernel2(sc_module_name name);
    SC_HAS_PROCESS(kernel2);

    ~kernel2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel2_mul_32s_3bkb<1,6,32,32,32>* kernel2_mul_32s_3bkb_U1;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg0_1_reg_82;
    sc_signal< sc_lv<32> > reg1_1_reg_92;
    sc_signal< sc_lv<11> > i_reg_103;
    sc_signal< sc_lv<11> > ap_pipeline_reg_pp0_iter1_i_reg_103;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<32> > reg_reg_115;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > reg2_reg_165;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_126_p2;
    sc_signal< sc_lv<1> > exitcond_reg_185;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_exitcond_reg_185;
    sc_signal< sc_lv<11> > i_1_fu_138_p2;
    sc_signal< sc_lv<11> > i_1_reg_189;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > result_fu_144_p2;
    sc_signal< sc_lv<32> > result_reg_194;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > reg0_1_phi_fu_85_p4;
    sc_signal< sc_lv<11> > i_phi_fu_107_p4;
    sc_signal< sc_lv<32> > reg_phi_fu_118_p4;
    sc_signal< sc_lv<64> > tmp_1_fu_150_p1;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_lv<32> > grp_fu_132_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state11;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_pp0_stage1;
    static const sc_lv<9> ap_ST_fsm_pp0_stage2;
    static const sc_lv<9> ap_ST_fsm_pp0_stage3;
    static const sc_lv<9> ap_ST_fsm_pp0_stage4;
    static const sc_lv<9> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<11> ap_const_lv11_3;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_array_r_d1();
    void thread_array_r_we1();
    void thread_exitcond_fu_126_p2();
    void thread_i_1_fu_138_p2();
    void thread_i_phi_fu_107_p4();
    void thread_reg0_1_phi_fu_85_p4();
    void thread_reg_phi_fu_118_p4();
    void thread_result_fu_144_p2();
    void thread_tmp_1_fu_150_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
